// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  MultichannelPromotionModel,
  PromotionValidityModel,
  RedeemBodyModel,
  StatusCodeResult,
  multichannelPromotionModelRequest,
  multichannelPromotionModelResponse,
  promotionValidityModelRequest,
  promotionValidityModelResponse,
  redeemBodyModelRequest,
  statusCodeResultResponse,
} from '../common';
import {
  MultichannelPromotionsDeleteByExternalIdParams,
  MultichannelPromotionsGetByExternalIdParams,
  MultichannelPromotionsGetByValidityExternalIdParams,
} from './request-params';
import { MultichannelBasePromotionModel, multichannelBasePromotionModelRequest } from './models';

export class PromotionsService extends BaseService {
  /**
   * Gets the multichannel promotion with the identifier which is set by Voyado
   * @param {string} id - Promotion identifier from Voyado
   * @returns {Promise<HttpResponse<MultichannelPromotionModel>>} OK
   */
  async multichannelPromotionsGetById(
    id: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MultichannelPromotionModel>> {
    const path = this.client.buildPath('/api/v2/promotions/multichannels/{id}', { id: id });
    const options: any = {
      responseSchema: multichannelPromotionModelResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates an existing multichannel promotion. 
Only multichannel promotion in status 'Draft' can be updated.
 * @param {string} id - Voyado multichannel promotion identifier
 * @returns {Promise<HttpResponse<MultichannelPromotionModel>>} OK
 */
  async multichannelPromotionsUpdate(
    id: string,
    body: MultichannelPromotionModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MultichannelPromotionModel>> {
    const path = this.client.buildPath('/api/v2/promotions/multichannels/{id}', { id: id });
    const options: any = {
      responseSchema: multichannelPromotionModelResponse,
      requestSchema: multichannelPromotionModelRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Only unassigned multichannel promotions can be deleted
   * @param {string} id - Voyado identifier to a multichannel promotion
   * @returns {Promise<HttpResponse<StatusCodeResult>>} OK
   */
  async multichannelPromotionsDeleteById(
    id: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<StatusCodeResult>> {
    const path = this.client.buildPath('/api/v2/promotions/multichannels/{id}', { id: id });
    const options: any = {
      responseSchema: statusCodeResultResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
   * Gets the multichannel promotion with the identifier which is an internal reference for Voyado
   * @param {string} id - Identifier inside of Voyado
   * @returns {Promise<HttpResponse<PromotionValidityModel>>} OK
   */
  async multichannelPromotionsGetValidityById(
    id: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PromotionValidityModel>> {
    const path = this.client.buildPath('/api/v2/promotions/multichannels/{id}/validity', { id: id });
    const options: any = {
      responseSchema: promotionValidityModelResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
 * Updates duration of an existing multichannel promotion. 
Only multichannel promotion in status 'Draft' can be updated.
 * @param {string} id - Voyado multichannel promotion identifier
 * @returns {Promise<HttpResponse<MultichannelPromotionModel>>} OK
 */
  async multichannelPromotionsUpdateValidity(
    id: string,
    body: PromotionValidityModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MultichannelPromotionModel>> {
    const path = this.client.buildPath('/api/v2/promotions/multichannels/{id}/validity', { id: id });
    const options: any = {
      responseSchema: multichannelPromotionModelResponse,
      requestSchema: promotionValidityModelRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
   * Gets the multichannel promotion with the identifier which is an external reference for Voyado
   * @param {string} externalId - External identifier outside of Voyado
   * @returns {Promise<HttpResponse<MultichannelPromotionModel>>} OK
   */
  async multichannelPromotionsGetByExternalId(
    params: MultichannelPromotionsGetByExternalIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MultichannelPromotionModel>> {
    const path = '/api/v2/promotions/multichannels';
    const options: any = {
      responseSchema: multichannelPromotionModelResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.externalId) {
      options.queryParams['externalId'] = params?.externalId;
    }
    return this.client.get(path, options);
  }

  /**
   * Only creates multichannel promotion in status 'Draft'.
   * @returns {Promise<HttpResponse<MultichannelPromotionModel>>} Created
   */
  async multichannelPromotionsCreate(
    body: MultichannelBasePromotionModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<MultichannelPromotionModel>> {
    const path = '/api/v2/promotions/multichannels';
    const options: any = {
      responseSchema: multichannelPromotionModelResponse,
      requestSchema: multichannelBasePromotionModelRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Only unassigned multichannel promotions can be deleted
   * @param {string} externalId - External identifier to a multichannel promotion
   * @returns {Promise<HttpResponse<StatusCodeResult>>} OK
   */
  async multichannelPromotionsDeleteByExternalId(
    params: MultichannelPromotionsDeleteByExternalIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<StatusCodeResult>> {
    const path = '/api/v2/promotions/multichannels';
    const options: any = {
      responseSchema: statusCodeResultResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.externalId) {
      options.queryParams['externalId'] = params?.externalId;
    }
    return this.client.delete(path, options);
  }

  /**
   * Gets the multichannel promotion validity with the identifier which is an external reference for Voyado
   * @param {string} externalId - External identifier outside of Voyado
   * @returns {Promise<HttpResponse<PromotionValidityModel>>} OK
   */
  async multichannelPromotionsGetByValidityExternalId(
    params: MultichannelPromotionsGetByValidityExternalIdParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PromotionValidityModel>> {
    const path = '/api/v2/promotions/multichannels/validity';
    const options: any = {
      responseSchema: promotionValidityModelResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.externalId) {
      options.queryParams['externalId'] = params?.externalId;
    }
    return this.client.get(path, options);
  }

  /**
 * Redeem a promotion (multichannel offer or mobile swipe) for a Contact using the internal promotion Id

Redemption channel can be POS, ECOM or OTHER.
 * @param {string} promotionId - The id of the promotion
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async offerPromotionsRedeemByPromotionId(
    promotionId: string,
    body: RedeemBodyModel,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/api/v2/promotions/codes/{promotionId}/redeem', { promotionId: promotionId });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: redeemBodyModelRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Reactivate a redeemed reward voucher
   * @param {string} id - The id of the reward voucher
   * @returns {Promise<HttpResponse<string>>} OK
   */
  async offerPromotionsReactivatePromotionCode(
    id: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<string>> {
    const path = this.client.buildPath('/api/v2/promotions/reward-vouchers/{id}/reactivate', { id: id });
    const options: any = {
      responseSchema: z.string(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
