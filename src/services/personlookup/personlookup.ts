// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { ContactSearchResult, contactSearchResultResponse } from '../common';
import { PersonLookupGetPersonLookupParams } from './request-params';

export class PersonlookupService extends BaseService {
  /**
   *
   * @param {string} [socialSecurityNumber] - String that contains social security number
   * @param {string} [phoneNumber] - String that contains mobile phone number
   * @param {string} [countryCode] - Country where the contact is registered
   * @returns {Promise<HttpResponse<ContactSearchResult>>} OK
   */
  async personLookupGetPersonLookup(
    params?: PersonLookupGetPersonLookupParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ContactSearchResult>> {
    const path = '/api/v2/personlookup/getpersonlookup';
    const options: any = {
      responseSchema: contactSearchResultResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.socialSecurityNumber) {
      options.queryParams['socialSecurityNumber'] = params?.socialSecurityNumber;
    }
    if (params?.phoneNumber) {
      options.queryParams['phoneNumber'] = params?.phoneNumber;
    }
    if (params?.countryCode) {
      options.queryParams['countryCode'] = params?.countryCode;
    }
    return this.client.get(path, options);
  }
}
