// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { ApiStore, apiStoreRequest, apiStoreResponse } from '../common';
import { StoresVGetStoreParams, StoresVGetStoresParams } from './request-params';

export class StoresService extends BaseService {
  /**
   *
   * @param {boolean} [includeInactive] - Value indicating if the inactive stores should be included or not. (Default value = false)
   * @returns {Promise<HttpResponse<ApiStore[]>>} OK
   */
  async storesVGetStores(
    params?: StoresVGetStoresParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ApiStore[]>> {
    const path = '/api/v2/stores';
    const options: any = {
      responseSchema: z.array(apiStoreResponse),
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.includeInactive) {
      options.queryParams['includeInactive'] = params?.includeInactive;
    }
    return this.client.get(path, options);
  }

  /**
   *
   * @returns {Promise<HttpResponse<ApiStore>>} OK
   */
  async storesVCreateStore(body: ApiStore, requestConfig?: RequestConfig): Promise<HttpResponse<ApiStore>> {
    const path = '/api/v2/stores';
    const options: any = {
      responseSchema: apiStoreResponse,
      requestSchema: apiStoreRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   *
   * @param {string} externalId - The external id of the store to get.
   * @param {boolean} [includeInactive] - Value indicating if the store can be inactive or not. (Default value = false)
   * @returns {Promise<HttpResponse<ApiStore>>} OK
   */
  async storesVGetStore(
    externalId: string,
    params?: StoresVGetStoreParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ApiStore>> {
    const path = this.client.buildPath('/api/v2/stores/{externalId}', { externalId: externalId });
    const options: any = {
      responseSchema: apiStoreResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.includeInactive) {
      options.queryParams['includeInactive'] = params?.includeInactive;
    }
    return this.client.get(path, options);
  }

  /**
   * Updates a store. externalId is the store identifier.
   * @param {string} externalId - The external id of the store to update.
   * @returns {Promise<HttpResponse<ApiStore>>} OK
   */
  async storesVUpdateStore(
    externalId: string,
    body: ApiStore,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ApiStore>> {
    const path = this.client.buildPath('/api/v2/stores/{externalId}', { externalId: externalId });
    const options: any = {
      responseSchema: apiStoreResponse,
      requestSchema: apiStoreRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
