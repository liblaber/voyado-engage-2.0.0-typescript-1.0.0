// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { ImportTransactionsObject, Receipt, importTransactionsObjectRequest, receiptRequest } from './models';

export class TransactionsService extends BaseService {
  /**
 * The /receipts endpoint is used to store each customers purchase and returns in Engage.
All fields in the data model can be used for segmentation and analysis in Engage.
If you want to send out transactional emails, use the /orders endpoint instead.

### Identification

To be able to store a receipt in Voyado, you need to connect it to a specific 
contact.

In the example payload below the contact type is “Member” and the key type is “email” 
The key has to be a unique data field for the specific contact type, 
normally one of these fields:
- contactId
- email
- mobilePhone
- memberNumber
- externalId
- socialSecurityNumber (personal identity number - only Swedish or Finnish)
 * @returns {Promise<HttpResponse<any>>} 
 */
  async importTransactionsImportReceipts(body: Receipt, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = '/api/v2/receipts';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: receiptRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
 * Required on **receipt**: 
externalId (Unique receipt id), invoiceNumber, customerKey, 
customerKeyType, invoiceCreatedDate, InvoiceModifiedDate, StoreName, StoreNumber

Required on **transaction**: 
externalId (Unique transaction id), articleNr, quantity, price and type (RETURN/DISCOUNT/PURCHASE)
Note! It's recommended to include Sku, as it's a required 
attribute when enriching purchase data from article data.
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async importTransactionsImport(
    body: ImportTransactionsObject,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = '/api/v2/transactions';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: importTransactionsObjectRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
