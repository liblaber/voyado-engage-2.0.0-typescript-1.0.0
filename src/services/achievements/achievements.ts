// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  ApiAchievementValue,
  PagedResultOfApiAchievementDefinition,
  apiAchievementValueResponse,
  pagedResultOfApiAchievementDefinitionResponse,
} from '../common';
import { AchievementsGetAllAchievementsParams } from './request-params';

export class AchievementsService extends BaseService {
  /**
   *
   * @param {string} contactId -
   * @returns {Promise<HttpResponse<ApiAchievementValue[]>>} OK
   */
  async achievementsGetAchievementsForContact(
    contactId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<ApiAchievementValue[]>> {
    const path = this.client.buildPath('/api/v2/contacts/{contactId}/achievements', { contactId: contactId });
    const options: any = {
      responseSchema: z.array(apiAchievementValueResponse),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   *
   * @param {number} [offset] -
   * @param {number} [count] -
   * @returns {Promise<HttpResponse<PagedResultOfApiAchievementDefinition>>} OK
   */
  async achievementsGetAllAchievements(
    params?: AchievementsGetAllAchievementsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<PagedResultOfApiAchievementDefinition>> {
    const path = '/api/v2/achievements';
    const options: any = {
      responseSchema: pagedResultOfApiAchievementDefinitionResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.offset) {
      options.queryParams['offset'] = params?.offset;
    }
    if (params?.count) {
      options.queryParams['count'] = params?.count;
    }
    return this.client.get(path, options);
  }

  /**
   *
   * @param {string} contactId -
   * @param {string} achievementId -
   * @returns {Promise<HttpResponse<any>>} No Content
   */
  async achievementsSetAchievement(
    contactId: string,
    achievementId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/api/v2/contacts/{contactId}/achievements/{achievementId}', {
      contactId: contactId,
      achievementId: achievementId,
    });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   *
   * @param {string} contactId -
   * @param {string} achievementId -
   * @returns {Promise<HttpResponse<any>>} No Content
   */
  async achievementsRemoveAchievement(
    contactId: string,
    achievementId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/api/v2/contacts/{contactId}/achievements/{achievementId}', {
      contactId: contactId,
      achievementId: achievementId,
    });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }
}
