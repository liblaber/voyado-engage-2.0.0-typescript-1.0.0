// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { StockLevelRequest, stockLevelRequestRequest } from '../common';
import { SubscriptionRequest, subscriptionRequestRequest } from './models';

export class InventoryService extends BaseService {
  /**
 * Update stock level for a specific SKU.

Request model:
- Sku*: Unique SKU of the product. E.g: "123XYZ"
- Quantity*: The latest stock quantity of the product. E.g: 10
- Locale: Culture code. A corresponding product feed should be configured. E.g: "sv-se"        
- ExternalId: External identifier. E.g: "SE-123XYZ"

\* required
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async inventoryUpdateStockLevel(body: StockLevelRequest, requestConfig?: RequestConfig): Promise<HttpResponse<any>> {
    const path = '/api/v2/inventory/stock-levels';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: stockLevelRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Batch update of stock levels for multiple SKU's.

Request model:
- Sku*: Unique SKU of the product. E.g: "123XYZ"
- Quantity*: The latest stock quantity of the product. E.g: 10
- Locale: Culture code. A corresponding product feed should be configured. E.g: "sv-se"        
- ExternalId: External identifier. E.g: "SE-123XYZ"

\* required
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async inventoryUpdateStockLevels(
    body: StockLevelRequest[],
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = '/api/v2/inventory/stock-levels/batch';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.put(path, options);
  }

  /**
 * Create a back in stock subscription for a specific SKU.

Request model:
- ContactId*: Contact id of the subscriber. E.g: "FF9FD9AF-6778-4714-B0FE-F6E6612840C8"
- Sku*: Unique SKU of the product. E.g: "123XYZ"
- Locale*: Culture code. A corresponding product feed should be configured. E.g: "sv-se"
- ExternalId: External identifier. E.g: "SE-123XYZ"

\* required
 * @returns {Promise<HttpResponse<any>>} OK
 */
  async backInStockSubscriptionSubscribe(
    body: SubscriptionRequest,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = '/api/v2/inventory/backinstock/subscriptions';
    const options: any = {
      responseSchema: z.any(),
      requestSchema: subscriptionRequestRequest,
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Delete a specific back in stock subscription.
   * @param {string} subscriptionId -
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async backInStockSubscriptionUnsubscribe(
    subscriptionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/api/v2/inventory/backinstock/subscriptions/{subscriptionId}', {
      subscriptionId: subscriptionId,
    });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }
}
