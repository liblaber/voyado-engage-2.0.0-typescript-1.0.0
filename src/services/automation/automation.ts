// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';

export class AutomationService extends BaseService {
  /**
   *
   * @param {string} triggerId -
   * @param {string} contactId -
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async customTriggersTriggerByContactId(
    triggerId: string,
    contactId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath('/api/v2/automation/customTriggers/{triggerId}/triggerByContactId/{contactId}', {
      triggerId: triggerId,
      contactId: contactId,
    });
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   *
   * @param {string} triggerId -
   * @param {string} ssn -
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async customTriggersTriggerBySocialSecurityNumber(
    triggerId: string,
    ssn: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath(
      '/api/v2/automation/customTriggers/{triggerId}/triggerBySocialSecurityNumber/{ssn}',
      { triggerId: triggerId, ssn: ssn },
    );
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   *
   * @param {string} triggerId -
   * @param {string} externalId -
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async customTriggersTriggerByExternalContactId(
    triggerId: string,
    externalId: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath(
      '/api/v2/automation/customTriggers/{triggerId}/triggerByExternalContactId/{externalId}',
      { triggerId: triggerId, externalId: externalId },
    );
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   *
   * @param {string} triggerId -
   * @param {string} contactType -
   * @param {string} keyValue -
   * @returns {Promise<HttpResponse<any>>} OK
   */
  async customTriggersTriggerByContactTypeAndKey(
    triggerId: string,
    contactType: string,
    keyValue: string,
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<any>> {
    const path = this.client.buildPath(
      '/api/v2/automation/customTriggers/{triggerId}/triggerByContactTypeAndKey/{contactType}/{keyValue}',
      { triggerId: triggerId, contactType: contactType, keyValue: keyValue },
    );
    const options: any = {
      responseSchema: z.any(),
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
