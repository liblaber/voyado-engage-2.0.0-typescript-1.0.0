// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  InteractionCreateResponse,
  InteractionModel,
  InteractionPage,
  interactionCreateResponseResponse,
  interactionModelResponse,
  interactionPageResponse,
} from '../common';
import { InteractionGetInteractionsParams } from './request-params';

export class InteractionsService extends BaseService {
  /**
   * Retrieve a specific Interaction by providing the interactionId.
   * @param {string} interactionId -
   * @returns {Promise<HttpResponse<InteractionModel>>} Interaction
   */
  async interactionGetInteraction(
    interactionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionModel>> {
    const path = this.client.buildPath('/api/v2/interactions/{interactionId}', { interactionId: interactionId });
    const options: any = {
      responseSchema: interactionModelResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Delete a specific Interaction by providing the interactionId.
   * @param {string} interactionId -
   * @returns {Promise<HttpResponse<any>>} Interaction Removed
   */
  async interactionDeleteInteraction(
    interactionId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/api/v2/interactions/{interactionId}', { interactionId: interactionId });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }

  /**
 * Retrieve multiple Interactions of a specified type connected to a specific contactId. Both schemaId and contactId are required. 
The continuation parameter can be used to access the next page when there are more than 50 records available. This token can be found in the response.
 * @param {string} contactId - 
 * @param {string} schemaId - 
 * @param {string} [continuation] - 
 * @returns {Promise<HttpResponse<InteractionPage>>} Interactions
 */
  async interactionGetInteractions(
    params: InteractionGetInteractionsParams,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionPage>> {
    const path = '/api/v2/interactions';
    const options: any = {
      responseSchema: interactionPageResponse,
      requestSchema: z.any(),
      queryParams: {},
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    if (params?.contactId) {
      options.queryParams['contactId'] = params?.contactId;
    }
    if (params?.schemaId) {
      options.queryParams['schemaId'] = params?.schemaId;
    }
    if (params?.continuation) {
      options.queryParams['continuation'] = params?.continuation;
    }
    return this.client.get(path, options);
  }

  /**
   * Create a new Interaction connected to a specific contactId.
   * @returns {Promise<HttpResponse<InteractionCreateResponse>>} InteractionResponse
   */
  async interactionCreateInteraction(
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionCreateResponse>> {
    const path = '/api/v2/interactions';
    const options: any = {
      responseSchema: interactionCreateResponseResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }
}
