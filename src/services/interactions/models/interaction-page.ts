// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { hypermediaLink, hypermediaLinkRequest, hypermediaLinkResponse } from './hypermedia-link';
import { interactionModel, interactionModelRequest, interactionModelResponse } from './interaction-model';

/**
 * The shape of the model inside the application code - what the users use
 */
export const interactionPage: any = z.lazy(() => {
  return z.object({
    links: z.array(hypermediaLink).optional(),
    items: z.array(interactionModel).optional(),
  });
});

/**
 *
 * @typedef  {InteractionPage} interactionPage
 * @property {HypermediaLink[]}
 * @property {InteractionModel[]}
 */
export type InteractionPage = z.infer<typeof interactionPage>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const interactionPageResponse: any = z.lazy(() => {
  return z
    .object({
      links: z.array(hypermediaLinkResponse).optional(),
      items: z.array(interactionModelResponse).optional(),
    })
    .transform((data) => ({
      links: data['links'],
      items: data['items'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const interactionPageRequest: any = z.lazy(() => {
  return z
    .object({ links: z.array(hypermediaLinkRequest).nullish(), items: z.array(interactionModelRequest).nullish() })
    .transform((data) => ({
      links: data['links'],
      items: data['items'],
    }));
});
