// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';

/**
 * The shape of the model inside the application code - what the users use
 */
export const productRecommendationsModel: any = z.lazy(() => {
  return z.object({
    skus: z.array(z.string()).optional(),
  });
});

/**
 *
 * @typedef  {ProductRecommendationsModel} productRecommendationsModel
 * @property {string[]}
 */
export type ProductRecommendationsModel = z.infer<typeof productRecommendationsModel>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const productRecommendationsModelResponse: any = z.lazy(() => {
  return z
    .object({
      skus: z.array(z.string()).optional(),
    })
    .transform((data) => ({
      skus: data['skus'],
    }));
});

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const productRecommendationsModelRequest: any = z.lazy(() => {
  return z.object({ skus: z.array(z.string()).nullish() }).transform((data) => ({
    skus: data['skus'],
  }));
});
