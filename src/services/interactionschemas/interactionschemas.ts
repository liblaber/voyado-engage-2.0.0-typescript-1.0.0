// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import {
  InteractionSchemaModel,
  InteractionSchemaResponse,
  InteractionSchemaWithoutJsonModel,
  interactionSchemaModelResponse,
  interactionSchemaResponseResponse,
  interactionSchemaWithoutJsonModelResponse,
} from '../common';

export class InteractionschemasService extends BaseService {
  /**
   * Retrieve all InteractionSchemas.
   * @returns {Promise<HttpResponse<InteractionSchemaWithoutJsonModel[]>>} InteractionSchemas
   */
  async interactionSchemaGetInteractionSchemas(
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionSchemaWithoutJsonModel[]>> {
    const path = '/api/v2/interactionschemas';
    const options: any = {
      responseSchema: z.array(interactionSchemaWithoutJsonModelResponse),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Create a new InteractionSchema.
   * @returns {Promise<HttpResponse<InteractionSchemaResponse>>} InteractionSchemaResponse
   */
  async interactionSchemaCreateInteractionSchema(
    body: any,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionSchemaResponse>> {
    const path = '/api/v2/interactionschemas';
    const options: any = {
      responseSchema: interactionSchemaResponseResponse,
      requestSchema: z.any(),
      body: body as any,
      headers: {
        'Content-Type': 'application/json',
      },
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.post(path, options);
  }

  /**
   * Retrieve a specific InteractionSchema by providing the schemaId.
   * @param {string} interactionSchemaId -
   * @returns {Promise<HttpResponse<InteractionSchemaModel>>} InteractionSchema
   */
  async interactionSchemaGetInteractionSchema(
    interactionSchemaId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<InteractionSchemaModel>> {
    const path = this.client.buildPath('/api/v2/interactionschemas/{interactionSchemaId}', {
      interactionSchemaId: interactionSchemaId,
    });
    const options: any = {
      responseSchema: interactionSchemaModelResponse,
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.get(path, options);
  }

  /**
   * Delete InteractionSchema by providing the schemaId.
   * @param {string} interactionSchemaId -
   * @returns {Promise<HttpResponse<any>>} InteractionSchema Removed
   */
  async interactionSchemaDeleteInteractionSchema(
    interactionSchemaId: string,
    requestConfig?: RequestConfig,
  ): Promise<HttpResponse<undefined>> {
    const path = this.client.buildPath('/api/v2/interactionschemas/{interactionSchemaId}', {
      interactionSchemaId: interactionSchemaId,
    });
    const options: any = {
      responseSchema: z.undefined(),
      requestSchema: z.any(),
      headers: {},
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      retry: requestConfig?.retry,
      config: this.config,
    };
    return this.client.delete(path, options);
  }
}
